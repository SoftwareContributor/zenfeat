{"title":"Capacitor Plugins","description":"Capacitor Plugins","url":"/docs/plugins","contributors":["mlynch","jcesarmobile"],"lastUpdated":"2018-06-01T00:00:00.000Z","headings":[{"id":"capacitor-plugins","level":1,"text":"Capacitor Plugins"},{"id":"getting-started","level":2,"text":"Getting Started"},{"id":"typescript-interface","level":2,"text":"TypeScript Interface"},{"id":"publishing","level":2,"text":"Publishing"},{"id":"next-steps","level":2,"text":"Next steps"}],"srcPath":"./docs-md/plugins/index.md","content":"\n<h1 id=\"capacitor-plugins\">\n  \n  Capacitor Plugins\n  \n</h1>\n<p>Plugins in Capacitor enable JavaScript to interface directly with Native APIs.</p>\n<p>With Plugins, a web app can access the full power of the Native APIs, doing everything a traditional native app can. Plugins are especially great for wrapping common native operations that might use very different APIs across platforms, while exposing a consistent, cross-platform API to JavaScript.</p>\n<p>Additionally, the Plugin capability in Capacitor makes it possible for teams with a mix of traditional native developers and web developers to work together on different parts of the app.</p>\n<p>Capacitor auto generates JavaScript hooks on the client, so most plugins only need to build\na native Swift/Obj-C plugin for iOS, and/or a Java one for Android. Of course, adding custom JavaScript\nfor a plugin is possible, and is just like providing a JavaScript npm package.</p>\n\n<h2 id=\"getting-started\">\n  <a class=\"heading-link\" href=\"#getting-started\"><app-icon name=\"link\"></app-icon>\n  Getting Started\n  </a>\n</h2>\n<p>Capacitor comes with a Plugin generator to start new plugins quickly. To use it, run</p>\n<pre><code>npx @capacitor/cli plugin:generate</code></pre><p>This starts a wizard prompting you for information about your new plugin. For example:</p>\n<pre><code>max@Maxs-iMac:~ $ npx @capacitor/cli plugin:generate\n✏️  Creating new Capacitor plugin\n? Plugin NPM name (snake-case): my-plugin\n? Plugin id (domain-style syntax. ex: com.example.plugin) com.ionicframework.myplugin\n? Plugin class name (ex: AwesomePlugin) MyPlugin\n? description:\n? git repository:\n? author:\n? license: MIT\n? package.json will be created, do you want to continue? (Y/n)</code></pre><ul>\n<li>The Plugin NPM name is what will become the npm package, and should be a snake-case name of a package that is available on npm (not a strict requirement if your package will be on a private npm repo).</li>\n<li>The Plugin ID is a domain-style identifier. Its primary use is the package name in Java.</li>\n<li>Plugin Class Name is the initial name of the class used in Java and Swift. See the additional note about class names in the <stencil-route-link  url=/docs/plugins/ios>iOS Plugin</stencil-route-link> section of this guide.</li>\n<li>The description is a brief introduction about the plugin.</li>\n<li>The git repository is the url to a git repository where the source code of the plugin will be hosted.</li>\n</ul>\n<p>The rest of the fields are optional and will fill out your initial <code>package.json</code></p>\n\n<h2 id=\"typescript-interface\">\n  <a class=\"heading-link\" href=\"#typescript-interface\"><app-icon name=\"link\"></app-icon>\n  TypeScript Interface\n  </a>\n</h2>\n<p>Each plugin comes with some typescript files that simply export TypeScript interfaces. These interfaces\ncan provide typing to TypeScript consumers of your plugin.</p>\n<p>Starting with the TypeScript interface can be a good way to build out the API for your plugin. For example,\nhere&#39;s the default interface for our Plugin:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">declare</span> <span class=\"token keyword\">module</span> <span class=\"token string\">\"@capacitor/core\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">interface</span> <span class=\"token class-name\">PluginRegistry</span> <span class=\"token punctuation\">{</span>\n    Echo<span class=\"token punctuation\">:</span> EchoPlugin<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">EchoPlugin</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">echo</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Promise<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n  </highlight-code-line>\n  \n<h2 id=\"publishing\">\n  <a class=\"heading-link\" href=\"#publishing\"><app-icon name=\"link\"></app-icon>\n  Publishing\n  </a>\n</h2>\n<p>Whenever you are ready to publish your plugin, just use:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> publish</code></pre>\n  </highlight-code-line>\n  <p>This will build the JS portion of your plugin and publish the rest of your plugin files to NPM.</p>\n<p>Your package can now be installed using <code>npm install your-plugin</code> in any Capacitor app.</p>\n\n<h2 id=\"next-steps\">\n  <a class=\"heading-link\" href=\"#next-steps\"><app-icon name=\"link\"></app-icon>\n  Next steps\n  </a>\n</h2>\n<p>Now it&#39;s up to you to make your plugin do something truly awesome!</p>\n<p>Follow the <stencil-route-link  url=/docs/plugins/ios>iOS</stencil-route-link> guide for information on using Swift (or Obj-C) to build an iOS plugin, the <stencil-route-link  url=/docs/plugins/android>Android</stencil-route-link> guide for building Android plugins with Java, the <stencil-route-link  url=/docs/plugins/web>Web</stencil-route-link> guide for implementing web and PWA functionality for your plugin, and the <stencil-route-link  url=/docs/plugins/js>Custom JavaScript</stencil-route-link> guide for information on how to build a custom JavaScript plugin (i.e. in addition to Capacitor&#39;s auto-JS plugin binding).</p>\n"}