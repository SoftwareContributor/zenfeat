{"title":"PWA Elements","description":"Using PWA Elements","url":"/docs/pwa-elements","contributors":["dotnetkow","mlynch"],"headings":[{"id":"pwa-elements","level":1,"text":"PWA Elements"},{"id":"installation","level":2,"text":"Installation"},{"id":"importing-pwa-elements","level":4,"text":"Importing PWA Elements"},{"id":"including-through-script-tag","level":4,"text":"Including through script tag"}],"srcPath":"./docs-md/web/pwa-elements.md","content":"\n<h1 id=\"pwa-elements\">\n  \n  PWA Elements\n  \n</h1>\n<p class=\"intro\">Some Capacitor plugins, such as <code>Camera</code>, have web-based UI available when not running natively. For example, calling <code>Camera.getPhoto()</code> will \nload a responsive photo-taking experience when running on the web or electron:</p>\n\n<img src=\"/assets/img/docs/pwa-elements.png\" style=\"height: 200px\" />\n\n<p>This UI is implemented using a subset of the <a href=\"http://ionicframework.com/\">Ionic Framework</a> web components. Due to the magic of Shadow DOM, these components should not conflict\nwith your own UI whether you choose to use Ionic or not.</p>\n\n<h2 id=\"installation\">\n  <a class=\"heading-link\" href=\"#installation\"><ion-icon name=\"ios-link\"></ion-icon>\n  Installation\n  </a>\n</h2>\n<p>To enable these controls, you must add <code>@ionic/pwa-elements</code> to your app. </p>\n<p>A typical installation involves importing the package and registering the elements, or adding a script tag to the <code>&lt;head&gt;</code> of the <code>index.html</code> for your app:</p>\n\n<h4 id=\"importing-pwa-elements\">\n  <a class=\"heading-link\" href=\"#importing-pwa-elements\"><ion-icon name=\"ios-link\"></ion-icon>\n  Importing PWA Elements\n  </a>\n</h4>\n\n  <highlight-code-line >\n    <pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @ionic/pwa-elements</code></pre>\n  </highlight-code-line>\n  <p>Then, depending on your framework of choice, import the element loader and call it at the correct time:</p>\n<p><em>React</em></p>\n<p><code>index.tsx</code> or <code>index.js</code>:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-ts\"><code class=\"language-ts\">import { defineCustomElements } from '@ionic/pwa-elements/loader';\n\nReactDOM.render(&lt;App /&gt;, document.getElementById('root'));\n\n// Call the element loader after the app has been rendered the first time\ndefineCustomElements(window);</code></pre>\n  </highlight-code-line>\n  <p><em>Angular</em></p>\n<p><code>main.ts</code>:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-ts\"><code class=\"language-ts\">import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nimport { defineCustomElements } from '@ionic/pwa-elements/loader';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err =&gt; console.log(err));\n\n// Call the element loader after the platform has been bootstrapped\ndefineCustomElements(window);</code></pre>\n  </highlight-code-line>\n  \n<h4 id=\"including-through-script-tag\">\n  <a class=\"heading-link\" href=\"#including-through-script-tag\"><ion-icon name=\"ios-link\"></ion-icon>\n  Including through script tag\n  </a>\n</h4>\n<p>PWA Elements can be included through a script tag in your <code>index.html</code>. However, keep in mind this will not work for offline scenarios:</p>\n\n  <highlight-code-line >\n    <pre class=\"language-html\"><code class=\"language-html\">&lt;script type=\"module\" src=\"https://unpkg.com/@ionic/pwa-elements@latest/dist/ionicpwaelements/ionicpwaelements.esm.js\"&gt;&lt;/script&gt;\n&lt;script nomodule src=\"https://unpkg.com/@ionic/pwa-elements@latest/dist/ionicpwaelements/ionicpwaelements.js\"&gt;&lt;/script&gt;</code></pre>\n  </highlight-code-line>\n  "}